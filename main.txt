// package main

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"
// 	"log"
// 	"net/http"
// 	"time"

// 	"github.com/gorilla/mux"
// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/bson/primitive"
// 	"go.mongodb.org/mongo-driver/mongo"
// 	"go.mongodb.org/mongo-driver/mongo/options"
// 	"go.mongodb.org/mongo-driver/mongo/readpref"
// )

// var client *mongo.Client //creating instance for our client connection

// type Person struct {
// 	ID        primitive.ObjectID `json:"_id,omitempty" bson:"_id,omitempty"`
// 	Firstname string             `json:"firstname,omitempty" bson:"firstname,omitempty"`
// 	Lastname  string             `json:"lastname,omitempty" bson:"lastname,omitempty"`
// }

// func CreatePersonEndpoint(response http.ResponseWriter, request *http.Request) {
// 	fmt.Println("Sd")
// 	response.Header().Set("content-type", "application/json")
// 	var person Person
// 	_ = json.NewDecoder(request.Body).Decode(&person)
// 	collection := client.Database("thepolyglotdeveloper").Collection("people")
// 	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
// 	result, _ := collection.InsertOne(ctx, person)
// 	json.NewEncoder(response).Encode(result)
// }

// func GetPersonEndpoint(response http.ResponseWriter, request *http.Request) {
// 	response.Header().Set("content-type", "application/json")
// 	params := mux.Vars(request)
// 	id, _ := primitive.ObjectIDFromHex(params["id"])
// 	var person Person
// 	collection := client.Database("thepolyglotdeveloper").Collection("people")
// 	ctx, _ := context.WithTimeout(context.Background(), 30*time.Second)
// 	err := collection.FindOne(ctx, Person{ID: id}).Decode(&person)
// 	if err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	json.NewEncoder(response).Encode(person)
// }

// func GetPeopleEndpoint(response http.ResponseWriter, request *http.Request) {
// 	response.Header().Set("content-type", "application/json")
// 	var people []Person
// 	collection := client.Database("thepolyglotdeveloper").Collection("people")
// 	ctx, _ := context.WithTimeout(context.Background(), 30*time.Second)
// 	cursor, err := collection.Find(ctx, bson.M{})
// 	if err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	defer cursor.Close(ctx)
// 	for cursor.Next(ctx) {
// 		var person Person
// 		cursor.Decode(&person)
// 		people = append(people, person)
// 	}
// 	if err := cursor.Err(); err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	json.NewEncoder(response).Encode(people)
// }

// func ConnectMongo() {

// 	var (
// 		client   *mongo.Client
// 		mongoURL = "mongodb+srv://admin:admin@cluster0.tis34.mongodb.net/thepolyglotdeveloper?retryWrites=true&w=majority"
// 	)

// 	// Initialize a new mongo client with options
// 	client, err := mongo.NewClient(options.Client().ApplyURI(mongoURL))
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// Connect the mongo client to the MongoDB server
// 	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
// 	err = client.Connect(ctx)

// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	defer client.Disconnect(ctx)
// 	err = client.Ping(ctx, readpref.Primary())
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	databases, err := client.ListDatabaseNames(ctx, bson.M{})
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	fmt.Println(databases)
// 	fmt.Println("connected to nosql database:", mongoURL)

// }

// func main() {
// 	//establich the connection
// 	fmt.Println("Starting the application...")
// 	ConnectMongo()

// 	router := mux.NewRouter()
// 	router.HandleFunc("/person", CreatePersonEndpoint).Methods("POST")
// 	router.HandleFunc("/people", GetPeopleEndpoint).Methods("GET")
// 	router.HandleFunc("/person/{id}", GetPersonEndpoint).Methods("GET")
// 	http.ListenAndServe(":12345", router)
// }
